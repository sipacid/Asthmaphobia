---
interface Props {
  question: string;
  answer: string;
}

const { question, answer } = Astro.props;
---

<div class="faq-item">
  <button class="question-wrapper" aria-expanded="false" aria-controls="answer">
    <span class="question">{question}</span>
    <svg
      class="toggle-icon"
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <line x1="12" y1="5" x2="12" y2="19"></line>
      <line x1="5" y1="12" x2="19" y2="12"></line>
    </svg>
  </button>
  <div class="answer" hidden>
    <div class="answer-content" set:html={answer.replace(/â€¢/g, "&bull;")} />
  </div>
</div>

<style>
  .faq-item {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(139, 92, 246, 0.1);
    border-radius: var(--radius-lg);
    overflow: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    margin-bottom: 1rem;
  }

  .faq-item:hover {
    border-color: rgba(139, 92, 246, 0.2);
    box-shadow: 0 4px 12px rgba(139, 92, 246, 0.1);
  }

  .faq-item.active {
    background: rgba(0, 0, 0, 0.7);
    border-color: rgba(139, 92, 246, 0.3);
    box-shadow: 0 8px 24px rgba(139, 92, 246, 0.15);
  }

  .question-wrapper {
    width: 100%;
    padding: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: none;
    border: none;
    cursor: pointer;
    text-align: left;
    transition: all 0.2s ease;
  }

  .question {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--heading-color);
    margin-right: 1rem;
    line-height: 1.4;
  }

  .toggle-icon {
    width: 24px;
    height: 24px;
    color: var(--primary-color);
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    flex-shrink: 0;
  }

  .faq-item.active .toggle-icon {
    transform: rotate(45deg);
  }

  .answer {
    padding: 0 1.5rem;
    max-height: 0;
    overflow: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
  }

  .faq-item.active .answer {
    padding: 0 1.5rem 1.5rem;
    max-height: 1000px;
    opacity: 1;
  }

  .answer-content {
    color: var(--text-color);
    opacity: 0.9;
    line-height: 1.6;
    font-size: 1rem;
  }

  .answer-content p {
    margin-bottom: 1rem;
  }

  .answer-content p:last-child {
    margin-bottom: 0;
  }

  @media (max-width: 768px) {
    .question-wrapper {
      padding: 1.25rem;
    }

    .question {
      font-size: 1rem;
    }

    .answer {
      padding: 0 1.25rem;
    }

    .faq-item.active .answer {
      padding: 0 1.25rem 1.25rem;
    }

    .answer-content {
      font-size: 0.95rem;
    }
  }
</style>

<script>
  const faqItems = document.querySelectorAll(".faq-item");

  faqItems.forEach((item) => {
    const button = item.querySelector(".question-wrapper") as HTMLButtonElement;
    const answer = item.querySelector(".answer") as HTMLElement;

    button?.addEventListener("click", () => {
      const isExpanded = button.getAttribute("aria-expanded") === "true";
      button.setAttribute("aria-expanded", String(!isExpanded));

      if (!isExpanded) {
        // Close other items
        faqItems.forEach((otherItem) => {
          if (otherItem !== item) {
            const otherButton = otherItem.querySelector(
              ".question-wrapper",
            ) as HTMLButtonElement;
            const otherAnswer = otherItem.querySelector(
              ".answer",
            ) as HTMLElement;

            otherButton?.setAttribute("aria-expanded", "false");
            otherItem.classList.remove("active");
            otherAnswer.style.display = "none";
          }
        });
      }

      item.classList.toggle("active");
      answer.style.display = isExpanded ? "none" : "block";
    });
  });
</script>
