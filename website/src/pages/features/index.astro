---
import Layout from "../../layouts/Layout.astro";
import { appInfo } from "../../config/appInfo";

// SVG Icons for categories
const icons = {
  visuals: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
    <circle cx="12" cy="12" r="3"></circle>
  </svg>`,
  movement: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-9"></path>
    <path d="M18 2V8H12"></path>
    <path d="M18 2 8 12"></path>
  </svg>`,
  ghostManipulation: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M9 10h.01"></path>
    <path d="M15 10h.01"></path>
    <path d="M12 2a8 8 0 0 0-8 8v12l3-3 2.5 2.5L12 19l2.5 2.5L17 19l3 3V10a8 8 0 0 0-8-8z"></path>
  </svg>`,
  playerAbilities: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon>
  </svg>`,
  cursedItems: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20"></path>
  </svg>`,
  miscellaneous: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"></path>
  </svg>`,
  download: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
    <polyline points="7 10 12 15 17 10"></polyline>
    <line x1="12" y1="15" x2="12" y2="3"></line>
  </svg>`,
  chevronRight: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <polyline points="9 18 15 12 9 6"></polyline>
  </svg>`,
  github: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"></path>
    <path d="M9 18c-4.51 2-5-2-7-2"></path>
  </svg>`,
};

// Define feature categories and their items
const featureCategories = [
  {
    name: "Visuals",
    icon: icons.visuals,
    description: "See everything in the game world",
    features: [
      {
        title: "Ghost ESP",
        description:
          "See ghosts through walls with customizable colors and distance indicators. Instantly know where the ghost is at all times, even during hunts.",
      },
      {
        title: "Player ESP",
        description:
          "Track teammates through walls with name tags and distance indicators. Never lose sight of your team, even in the largest maps.",
      },
      {
        title: "Evidence ESP",
        description:
          "Highlight all evidence items through walls, making investigations quick and efficient. Find ghost orbs, fingerprints, and other evidence immediately.",
      },
      {
        title: "Fusebox ESP",
        description:
          "Locate fuseboxes through walls, allowing you to quickly restore power when the ghost turns it off.",
      },
      {
        title: "Ghost Window",
        description:
          "Display detailed ghost information in a separate window, including ghost type, hunting status, and activity level.",
      },
      {
        title: "Watermark",
        description:
          "Optional watermark showing Asthmaphobia version and FPS counter.",
      },
    ],
  },
  {
    name: "Movement",
    icon: icons.movement,
    description: "Enhanced player movement capabilities",
    features: [
      {
        title: "NoClip",
        description:
          "Walk through walls, doors, and any solid object in the game. Access areas that would normally be inaccessible.",
      },
      {
        title: "Speed Hack",
        description:
          "Adjust your movement speed to move faster or slower than normal. Configurable with hotkeys for quick adjustments.",
      },
      {
        title: "Infinite Stamina",
        description:
          "Run indefinitely without getting tired. Never slow down when sprinting, even with heavy equipment.",
      },
      {
        title: "Teleport",
        description:
          "Instantly teleport to any location on the map, including the ghost, teammates, or specific coordinates.",
      },
    ],
  },
  {
    name: "Ghost Manipulation",
    icon: icons.ghostManipulation,
    description: "Control and interact with ghosts",
    features: [
      {
        title: "Ghost Modifier",
        description:
          "Modify ghost properties like speed, visibility, and hunting behavior. Make the ghost more or less aggressive as desired.",
      },
      {
        title: "Ghost Interactor",
        description:
          "Force the ghost to interact with objects, create EMF readings, or perform specific actions remotely.",
      },
    ],
  },
  {
    name: "Player Abilities",
    icon: icons.playerAbilities,
    description: "Enhance your character's abilities",
    features: [
      {
        title: "God Mode",
        description:
          "Become invulnerable to ghost attacks and environmental damage. Survive hunts without hiding.",
      },
      {
        title: "Player Modifier",
        description:
          "Modify player attributes like sanity level, carrying capacity, and interaction range.",
      },
    ],
  },
  {
    name: "Cursed Items",
    icon: icons.cursedItems,
    description: "Manipulate cursed items for your advantage",
    features: [
      {
        title: "Cursed Item Modifier",
        description:
          "Modify the behavior and effects of cursed items like the Ouija Board, Music Box, and Summoning Circle.",
      },
      {
        title: "Force Card",
        description:
          "Force specific Tarot Card draws from the deck, guaranteeing beneficial cards like 'The Fool' or 'The High Priestess'.",
      },
    ],
  },
  {
    name: "Miscellaneous",
    icon: icons.miscellaneous,
    description: "Additional utility features",
    features: [
      {
        title: "Anti-Kick",
        description:
          "Prevent being kicked from multiplayer lobbies, even by the host.",
      },
      {
        title: "Custom Name",
        description:
          "Change your in-game name to anything, including special characters and formatting.",
      },
      {
        title: "Door Modifier",
        description:
          "Control all doors remotely, including locked doors and closets.",
      },
      {
        title: "Free Mouse Look",
        description: "Look around freely while dead or in equipment view mode.",
      },
      {
        title: "Leave People",
        description:
          "Force other players to leave the game or disconnect them from the lobby.",
      },
      {
        title: "Reward Modifier",
        description:
          "Modify mission rewards and experience points earned after completing contracts.",
      },
    ],
  },
];

// Calculate total number of features
const totalFeatureCount = featureCategories.reduce(
  (sum, category) => sum + category.features.length,
  0,
);
---

<Layout
  title="Asthmaphobia Features - The Ultimate Phasmophobia Cheat Tool"
  description="Explore all the powerful features of Asthmaphobia, the best Phasmophobia cheat tool. ESP, ghost detection, teleportation and more!"
>
  <div class="features-container">
    <section class="page-header">
      <div class="header-content">
        <span class="feature-counter">{totalFeatureCount}+ Features</span>
        <h1>Asthmaphobia Features</h1>
        <p>Discover all the powerful tools at your disposal</p>
      </div>
    </section>

    <nav class="category-nav">
      <ul>
        {
          featureCategories.map((category) => (
            <li>
              <a href={`#${category.name.toLowerCase()}`} class="nav-link">
                <span class="nav-icon" set:html={category.icon} />
                <span class="nav-text">{category.name}</span>
              </a>
            </li>
          ))
        }
      </ul>
    </nav>

    <section class="intro">
      <p>
        Asthmaphobia is packed with features to enhance your Phasmophobia
        experience. From ESP to ghost manipulation, movement hacks to
        anti-detection systems, our cheat tool offers everything you need to
        dominate the game.
      </p>
    </section>

    <!-- Feature categories -->
    {
      featureCategories.map((category) => (
        <section class="feature-category" id={category.name.toLowerCase()}>
          <div class="category-header">
            <div class="header-left">
              <div class="category-icon-wrapper">
                <div class="category-icon" set:html={category.icon} />
                <div class="icon-glow" />
              </div>
              <div class="category-title">
                <h2>{category.name}</h2>
                <p class="category-description">{category.description}</p>
              </div>
            </div>
            <div class="header-right">
              <div class="feature-count-wrapper">
                <span class="feature-count-number">
                  {category.features.length}
                </span>
                <span class="feature-count-text">Features</span>
              </div>
            </div>
          </div>

          <div class="feature-grid">
            {category.features.map((feature) => (
              <div class="feature-card">
                <div class="card-content">
                  <h3>{feature.title}</h3>
                  <p>{feature.description}</p>
                </div>
              </div>
            ))}
          </div>
        </section>
      ))
    }

    <section class="request-feature-section">
      <div class="request-content">
        <div class="request-icon-wrapper">
          <span class="request-icon" set:html={icons.github} />
        </div>
        <h2>Missing a Feature?</h2>
        <p>
          Can't find what you're looking for? We're constantly developing new
          features based on community feedback. Request a feature or report an
          issue on our GitHub repository!
        </p>
        <a
          href={appInfo.socialLinks.github}
          target="_blank"
          rel="noopener"
          class="btn secondary"
        >
          <span class="btn-icon" set:html={icons.github} />
          <span class="btn-text">Request on GitHub</span>
        </a>
      </div>
    </section>

    <section class="cta-section">
      <div class="cta-content">
        <h2>Ready to experience all these features?</h2>
        <p>
          Download Asthmaphobia now and take your Phasmophobia gameplay to the
          next level. Our cheat tool is regularly updated to ensure
          compatibility with the latest game version.
        </p>
        <div class="cta-buttons">
          <a href={appInfo.downloadUrl} class="btn primary">
            <span class="btn-text">Download Now</span>
            <span class="btn-icon" set:html={icons.chevronRight} />
          </a>
          <a href="/faq" class="btn secondary">Read FAQ</a>
        </div>
      </div>
    </section>
  </div>
</Layout>

<style>
  .features-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem 4rem;
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
    padding: 4rem 0 2rem;
    position: relative;
    background: linear-gradient(
      180deg,
      rgba(155, 89, 182, 0.05) 0%,
      transparent 100%
    );
    border-radius: 16px;
  }

  .header-content {
    max-width: 800px;
    margin: 0 auto;
  }

  .feature-counter {
    display: inline-block;
    background: linear-gradient(135deg, var(--primary-color), #8e44ad);
    color: white;
    font-weight: 600;
    font-size: 0.9rem;
    padding: 0.4rem 1rem;
    border-radius: 20px;
    margin-bottom: 1.5rem;
    letter-spacing: 0.5px;
    box-shadow: 0 4px 15px rgba(155, 89, 182, 0.25);
    animation: pulse 2s infinite;
  }

  .page-header h1 {
    font-size: 3.5rem;
    font-weight: 800;
    background: linear-gradient(to right, #fff, var(--primary-color));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 1.5rem;
    line-height: 1.1;
  }

  .page-header p {
    color: var(--text-color);
    font-size: 1.2rem;
    opacity: 0.9;
    margin: 0 auto;
    max-width: 600px;
  }

  .category-nav {
    position: sticky;
    top: 70px;
    z-index: 10;
    background: rgba(17, 17, 17, 0.8);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    margin-bottom: 2rem;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.05);
    width: fit-content;
    margin-left: auto;
    margin-right: auto;
    max-width: 100%;
  }

  .category-nav ul {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 0;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    justify-content: center;
    flex-wrap: nowrap;
  }

  .category-nav ul::-webkit-scrollbar {
    display: none;
  }

  .nav-link {
    display: flex;
    align-items: center;
    padding: 1rem 1.5rem;
    color: var(--text-color);
    text-decoration: none;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .nav-link:hover,
  .nav-link:focus {
    color: var(--primary-color);
    background: rgba(155, 89, 182, 0.1);
  }

  .nav-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 0.5rem;
  }

  .nav-icon svg {
    width: 20px;
    height: 20px;
    stroke: currentColor;
  }

  .intro {
    margin-bottom: 4rem;
    font-size: 1.2rem;
    text-align: center;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.7;
    color: var(--text-color);
    opacity: 0.9;
  }

  .feature-category {
    margin-bottom: 5rem;
    scroll-margin-top: 140px;
    animation: fadeIn 0.5s ease-in-out;
  }

  .category-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem 2rem;
    margin-bottom: 2rem;
    background: linear-gradient(
      90deg,
      rgba(155, 89, 182, 0.15) 0%,
      rgba(25, 25, 25, 0.6) 100%
    );
    border-radius: 16px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    position: relative;
    overflow: hidden;
    border: 1px solid rgba(155, 89, 182, 0.2);
  }

  .category-header::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%239C92AC' fill-opacity='0.05'/%3E%3C/svg%3E");
    z-index: 0;
  }

  .header-left {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    position: relative;
    z-index: 1;
  }

  .header-right {
    position: relative;
    z-index: 1;
  }

  .category-icon-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .category-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 70px;
    height: 70px;
    background: linear-gradient(
      135deg,
      rgba(155, 89, 182, 0.2),
      rgba(155, 89, 182, 0.4)
    );
    border-radius: 16px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(155, 89, 182, 0.3);
    position: relative;
    z-index: 2;
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
  }

  .feature-category:hover .category-icon {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 8px 25px rgba(155, 89, 182, 0.3);
  }

  .icon-glow {
    position: absolute;
    width: 100%;
    height: 100%;
    background: var(--primary-color);
    filter: blur(20px);
    opacity: 0.15;
    border-radius: 16px;
    z-index: 1;
    transition: opacity 0.3s ease;
  }

  .feature-category:hover .icon-glow {
    opacity: 0.25;
  }

  .category-icon svg {
    width: 35px;
    height: 35px;
    stroke: var(--primary-color);
    stroke-width: 1.75;
    transition: transform 0.3s ease;
  }

  .feature-category:hover .category-icon svg {
    transform: scale(1.1);
  }

  .category-title {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .category-header h2 {
    font-size: 2.2rem;
    font-weight: 700;
    margin: 0;
    color: #fff;
    position: relative;
    padding-bottom: 0.3rem;
    display: inline-block;
  }

  .category-header h2::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 30px;
    height: 3px;
    background: var(--primary-color);
    border-radius: 3px;
  }

  .category-description {
    color: var(--text-color);
    font-size: 1rem;
    opacity: 0.9;
    margin: 0;
    max-width: 800px;
    line-height: 1.5;
  }

  .feature-count-wrapper {
    background: rgba(155, 89, 182, 0.15);
    backdrop-filter: blur(10px);
    padding: 0.75rem 1.25rem;
    border-radius: 12px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    border: 1px solid rgba(155, 89, 182, 0.3);
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
  }

  .feature-category:hover .feature-count-wrapper {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }

  .feature-count-number {
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--primary-color);
    line-height: 1;
  }

  .feature-count-text {
    font-size: 0.8rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
  }

  .feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
  }

  .feature-card {
    background: linear-gradient(
      145deg,
      rgba(25, 25, 25, 0.6),
      rgba(15, 15, 15, 0.8)
    );
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.4s ease;
    height: 100%;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    position: relative;
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .feature-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--primary-color), transparent);
    opacity: 0;
    transition: opacity 0.4s ease;
  }

  .feature-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
  }

  .feature-card:hover::before {
    opacity: 1;
  }

  .card-content {
    padding: 2rem;
  }

  .feature-card h3 {
    color: var(--primary-color);
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.4rem;
    font-weight: 600;
    position: relative;
    display: inline-block;
  }

  .feature-card p {
    margin: 0;
    color: var(--text-color);
    line-height: 1.6;
    opacity: 0.85;
  }

  .request-feature-section {
    text-align: center;
    padding: 3rem 2rem;
    background: rgba(25, 25, 25, 0.4);
    border-radius: 16px;
    margin-bottom: 3rem;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.05);
    position: relative;
    overflow: hidden;
  }

  .request-feature-section::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23FFFFFF' fill-opacity='0.03'/%3E%3C/svg%3E");
    z-index: 0;
  }

  .request-content {
    position: relative;
    z-index: 1;
    max-width: 700px;
    margin: 0 auto;
  }

  .request-icon-wrapper {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.05);
    width: 80px;
    height: 80px;
    border-radius: 50%;
    margin-bottom: 1.5rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .request-icon svg {
    width: 40px;
    height: 40px;
    stroke: var(--text-color);
  }

  .request-feature-section h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: #fff;
    font-weight: 700;
  }

  .request-feature-section p {
    margin-bottom: 2rem;
    font-size: 1.1rem;
    line-height: 1.6;
    color: var(--text-color);
    opacity: 0.9;
  }

  .request-feature-section .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.8rem 1.8rem;
    background-color: rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
  }

  .request-feature-section .btn:hover {
    background-color: rgba(255, 255, 255, 0.15);
    transform: translateY(-3px);
  }

  .request-feature-section .btn-icon svg {
    width: 20px;
    height: 20px;
  }

  .cta-section {
    text-align: center;
    padding: 4rem 2rem;
    background: linear-gradient(
      135deg,
      rgba(155, 89, 182, 0.05),
      rgba(155, 89, 182, 0.15)
    );
    border-radius: 16px;
    margin-top: 3rem;
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(155, 89, 182, 0.1);
  }

  .cta-content {
    max-width: 800px;
    margin: 0 auto;
  }

  .cta-section h2 {
    margin-bottom: 1.5rem;
    font-size: 2rem;
    color: #fff;
    font-weight: 700;
  }

  .cta-section p {
    margin-bottom: 2.5rem;
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
    font-size: 1.1rem;
    line-height: 1.7;
    opacity: 0.9;
  }

  .cta-buttons {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
  }

  .btn {
    padding: 0.9rem 2.5rem;
    font-size: 1rem;
    font-weight: 600;
    border-radius: 8px;
    text-transform: uppercase;
    letter-spacing: 1px;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 180px;
  }

  .primary {
    background: linear-gradient(135deg, var(--primary-color), #8e44ad);
    color: white;
    box-shadow: 0 8px 20px rgba(155, 89, 182, 0.3);
    position: relative;
    overflow: hidden;
  }

  .primary:hover {
    transform: translateY(-3px);
    box-shadow: 0 12px 25px rgba(155, 89, 182, 0.4);
  }

  .btn-text {
    transition: transform 0.3s ease;
  }

  .btn-icon {
    display: flex;
    align-items: center;
    margin-left: 0.5rem;
    transition: transform 0.3s ease;
  }

  .btn-icon svg {
    width: 16px;
    height: 16px;
    stroke: currentColor;
  }

  .primary:hover .btn-text {
    transform: translateX(-5px);
  }

  .primary:hover .btn-icon {
    transform: translateX(5px);
  }

  .secondary {
    background-color: transparent;
    color: white;
    border: 2px solid var(--primary-color);
    position: relative;
    overflow: hidden;
  }

  .secondary::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    background-color: rgba(155, 89, 182, 0.1);
    transition: width 0.3s ease;
    z-index: -1;
  }

  .secondary:hover {
    transform: translateY(-3px);
  }

  .secondary:hover::before {
    width: 100%;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(155, 89, 182, 0.5);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(155, 89, 182, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(155, 89, 182, 0);
    }
  }

  @media (max-width: 968px) {
    .page-header h1 {
      font-size: 2.5rem;
    }

    .feature-grid {
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    }

    .category-header {
      padding: 1.25rem 1.5rem;
    }

    .category-icon {
      width: 60px;
      height: 60px;
    }

    .category-icon svg {
      width: 30px;
      height: 30px;
    }

    .category-header h2 {
      font-size: 1.8rem;
    }

    .category-nav {
      width: 95%;
      margin-left: auto;
      margin-right: auto;
      overflow-x: auto;
      top: 60px;
    }
  }

  @media (max-width: 768px) {
    .page-header {
      padding: 3rem 1rem 2rem;
    }

    .page-header h1 {
      font-size: 2rem;
      margin-bottom: 1rem;
    }

    .feature-counter {
      margin-bottom: 1rem;
    }

    .feature-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .category-nav {
      width: 100%;
      border-radius: 0;
      margin-bottom: 1.5rem;
    }

    .category-nav ul {
      justify-content: flex-start;
      padding: 0.5rem;
      overflow-x: auto;
    }

    .nav-link {
      padding: 0.8rem;
    }

    .nav-text {
      display: none;
    }

    .nav-icon svg {
      width: 24px;
      height: 24px;
    }

    .category-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.25rem;
      padding: 1.25rem;
    }

    .header-right {
      align-self: flex-end;
    }

    .category-title {
      gap: 0.5rem;
    }

    .cta-section {
      padding: 2.5rem 1rem;
    }

    .cta-buttons {
      flex-direction: column;
      gap: 1rem;
      align-items: stretch;
    }

    .btn {
      width: 100%;
      margin: 0;
      padding: 0.75rem 1.5rem;
    }

    .request-feature-section {
      padding: 2.5rem 1rem;
    }

    .feature-category {
      margin-bottom: 3rem;
      scroll-margin-top: 120px;
    }

    .intro {
      padding: 0 1rem;
      margin-bottom: 3rem;
      font-size: 1.1rem;
    }
  }

  @media (max-width: 480px) {
    .page-header h1 {
      font-size: 1.75rem;
    }

    .page-header p {
      font-size: 0.95rem;
    }

    .category-icon {
      width: 50px;
      height: 50px;
    }

    .category-header h2 {
      font-size: 1.5rem;
    }

    .category-icon svg {
      width: 24px;
      height: 24px;
    }

    .feature-card h3 {
      font-size: 1.2rem;
    }

    .card-content {
      padding: 1.25rem;
    }

    .category-header {
      padding: 1rem;
    }

    .header-left {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
      width: 100%;
    }

    .feature-count-wrapper {
      padding: 0.5rem 0.75rem;
    }

    .feature-count-number {
      font-size: 1.3rem;
    }

    .feature-count-text {
      font-size: 0.7rem;
    }

    .cta-section h2 {
      font-size: 1.5rem;
    }

    .category-description {
      font-size: 0.95rem;
    }

    .request-feature-section h2 {
      font-size: 1.5rem;
    }

    /* Fix for too-wide buttons on mobile */
    .cta-buttons {
      max-width: 280px;
      margin-left: auto;
      margin-right: auto;
    }

    /* Make the Request on GitHub button smaller on mobile */
    .request-feature-section .btn {
      min-width: auto;
      padding: 0.7rem 1.2rem;
      max-width: 220px;
      margin: 0 auto;
    }

    /* Fix for category nav on mobile - center properly */
    .category-nav {
      width: 100%;
      overflow: hidden;
    }

    .category-nav ul {
      padding: 0.5rem;
      display: flex;
      justify-content: center;
      width: max-content;
      margin: 0 auto;
    }
  }
</style>

<script>
  // Highlight active section in navigation
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll(".feature-category");
    const navLinks = document.querySelectorAll(".nav-link");

    const observerOptions = {
      rootMargin: "-120px 0px -70% 0px",
      threshold: 0,
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const activeId = entry.target.getAttribute("id");

          navLinks.forEach((link) => {
            if (link.getAttribute("href") === `#${activeId}`) {
              link.style.color = "var(--primary-color)";
              link.style.background = "rgba(155, 89, 182, 0.1)";

              // Also update the SVG color when active
              const svg = link.querySelector("svg");
              if (svg) {
                svg.style.stroke = "var(--primary-color)";
              }
            } else {
              link.style.color = "var(--text-color)";
              link.style.background = "transparent";

              // Reset SVG color
              const svg = link.querySelector("svg");
              if (svg) {
                svg.style.stroke = "currentColor";
              }
            }
          });
        }
      });
    }, observerOptions);

    sections.forEach((section) => {
      observer.observe(section);
    });
  });
</script>
